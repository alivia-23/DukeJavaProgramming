#BlueJ class context
comment0.target=FileResource
comment0.text=\n\ The\ FileResource</code>\ class\ represents\ a\ file\ and\ allows\ access\ to\ its\ contents\ a\ line\ at\n\ a\ time,\ using\ the\ method\ <code>lines</code>,\ or\ a\ word\ at\ a\ time,\ using\ the\ method\n\ words.\ These\ strings\ can\ then\ be\ iterated\ over\ using\ a\ <code>for</code>\ loop.\n\n\ <P>\n\ Example\ usage\:\n\n\ <PRE>\n\ FileResource\ fr\ \=\ new\ FileResource();\n\ for\ (String\ s\ \:\ fr.words())\ {\n\ \ \ \ \ //\ print\ or\ process\ s\n\ }\n\ </PRE>\n\n\ <P>\n\ If\ each\ line\ of\ the\ file\ represents\ separated\ data\ values,\ because\ its\ a\ CSV\ file,\ then\ the\ user\n\ can\ get\ a\ <code>getCSVParser</code>\ object\ to\ access\ that\ data\ more\ directly,\ using\ one\ of\ the\n\ <code>getCSVParser</code>\ methods.\n\n\ <P>\n\ Example\ CSV\ usage\:\n\n\ <PRE>\n\ FileResource\ fr\ \=\ new\ FileResource("food.csv");\n\ for\ (CSVRecord\ record\ \:\ fr.getCSVParser())\ {\n\ \ \ \ \ //\ print\ or\ process\ fields\ in\ record\n\ \ \ \ \ String\ name\ \=\ record.get("Name");\n\ \ \ \ \ //\ other\ processing\n\ }\n\ </PRE>\n\n\ <P>\n\ This\ software\ is\ licensed\ with\ an\ Apache\ 2\ license,\ see\n\ http\://www.apache.org/licenses/LICENSE-2.0\ for\ details.\n\n\ @author\ Duke\ Software\ Team\n
comment1.params=
comment1.target=FileResource()
comment1.text=\n\ Create\ a\ <code>FileResource</code>\ object\ that\ opens\ the\ file\ chosen\ by\ the\ user\ using\ a\ file\n\ selection\ dialog\ box.\n\n\ @throws\ @exception\ if\ no\ file\ is\ selected\ by\ the\ user\n
comment10.params=
comment10.target=org.apache.commons.csv.CSVParser\ getCSVParser()
comment10.text=\n\ Returns\ a\ <code>CSVParser</code>\ object\ to\ access\ the\ contents\ of\ an\ open\ file.\n\n\ Each\ line\ of\ the\ file\ should\ be\ formatted\ as\ data\ separated\ by\ commas\ and\ with\ a\ header\ row\n\ to\ describe\ the\ column\ names.\n\n\ @return\ a\ <code>CSVParser</code>\ that\ can\ provide\ access\ to\ the\ records\ in\ the\ file\ one\ at\ a\n\ \ \ \ \ \ \ \ \ time\n\ @throws\ @exception\ if\ this\ file\ does\ not\ represent\ a\ CSV\ formatted\ data\n
comment11.params=withHeader
comment11.target=org.apache.commons.csv.CSVParser\ getCSVParser(boolean)
comment11.text=\n\ Returns\ a\ <code>CSVParser</code>\ object\ to\ access\ the\ contents\ of\ an\ open\ file,\ possibly\n\ without\ a\ header\ row.\n\n\ Each\ line\ of\ the\ file\ should\ be\ formatted\ as\ data\ separated\ by\ commas\ and\ with/without\ a\n\ header\ row\ to\ describe\ the\ column\ names.\n\n\ @param\ withHeader\ uses\ first\ row\ of\ data\ as\ a\ header\ row\ only\ if\ true\n\ @return\ a\ <code>CSVParser</code>\ that\ can\ provide\ access\ to\ the\ records\ in\ the\ file\ one\ at\ a\n\ \ \ \ \ \ \ \ \ time\n\ @throws\ @exception\ if\ this\ file\ does\ not\ represent\ a\ CSV\ formatted\ data\n
comment12.params=withHeader\ delimiter
comment12.target=org.apache.commons.csv.CSVParser\ getCSVParser(boolean,\ java.lang.String)
comment12.text=\n\ Returns\ a\ <code>CSVParser</code>\ object\ to\ access\ the\ contents\ of\ an\ open\ file,\ possibly\n\ without\ a\ header\ row\ and\ a\ different\ data\ delimiter\ than\ a\ comma.\n\n\ Each\ line\ of\ the\ file\ should\ be\ formatted\ as\ data\ separated\ by\ the\ delimiter\ passed\ as\ a\n\ parameter\ and\ with/without\ a\ header\ row\ to\ describe\ the\ column\ names.\ This\ is\ useful\ if\ the\n\ data\ is\ separated\ by\ some\ character\ other\ than\ a\ comma.\n\n\ @param\ withHeader\ uses\ first\ row\ of\ data\ as\ a\ header\ row\ only\ if\ true\n\ @param\ delimiter\ a\ single\ character\ that\ separates\ one\ field\ of\ data\ from\ another\n\ @return\ a\ <code>CSVParser</code>\ that\ can\ provide\ access\ to\ the\ records\ in\ the\ file\ one\ at\ a\n\ \ \ \ \ \ \ \ \ time\n\ @throws\ @exception\ if\ this\ file\ does\ not\ represent\ a\ CSV\ formatted\ data\n\ @throws\ @exception\ if\ <code>delimiter.length()\ \!\=\ 1</code>\n
comment13.params=parser
comment13.target=java.lang.Iterable\ getCSVHeaders(org.apache.commons.csv.CSVParser)
comment13.text=\n\ Allows\ access\ to\ the\ column\ names\ of\ the\ header\ row\ of\ a\ CSV\ file\ (the\ first\ line\ in\ the\n\ file)\ one\ at\ a\ time.\ If\ the\ CSV\ file\ did\ not\ have\ a\ header\ row,\ then\ an\ empty\n\ <code>Iterator</code>\ is\ returned.\n\n\ @param\ parser\ the\ <code>CSVParser</code>\ that\ has\ been\ created\ for\ this\ file\n\ @return\ an\ <code>Iterable</code>\ that\ allows\ access\ one\ header\ name\ at\ a\ time\n
comment14.params=s
comment14.target=void\ write(java.lang.String)
comment14.text=\n\ Writes\ a\ string\ to\ the\ end\ of\ this\ file.\n\n\ @param\ s\ the\ string\ to\ saved\ to\ the\ file\n
comment15.params=list
comment15.target=void\ write(StorageResource)
comment15.text=\n\ Writes\ a\ list\ of\ strings\ to\ the\ end\ of\ this\ file,\ one\ element\ per\ line.\n\n\ @param\ list\ the\ strings\ to\ saved\ to\ the\ file\n
comment16.params=list
comment16.target=void\ write(java.lang.String[])
comment16.text=\n\ Writes\ a\ list\ of\ strings\ to\ the\ end\ of\ this\ file,\ one\ element\ per\ line.\n\n\ @param\ list\ the\ strings\ to\ saved\ to\ the\ file\n
comment17.params=list
comment17.target=void\ write(java.util.ArrayList)
comment17.text=\n\ Writes\ a\ list\ of\ strings\ to\ the\ end\ of\ this\ file,\ one\ element\ per\ line.\n\n\ @param\ list\ the\ strings\ to\ saved\ to\ the\ file\n
comment18.params=
comment18.target=void\ initRead()
comment19.params=f
comment19.target=void\ initRead(java.io.File)
comment2.params=file
comment2.target=FileResource(java.io.File)
comment2.text=\n\ Create\ a\ <code>FileResource</code>\ object\ that\ opens\ a\ file\ represented\ by\ the\ File\ object\n\ passed\ as\ a\ parameter.\n\n\ Useful,\ for\ example,\ when\ used\ in\ conjunction\ with\ the\ <code>DirectoryResource</code>\ class.\n\n\ @param\ file\ the\ file\ to\ be\ represented\ by\ this\ resource\n\ @throws\ @exception\ if\ the\ file\ cannot\ be\ accessed\n
comment20.params=fname
comment20.target=void\ initRead(java.lang.String)
comment21.params=stream
comment21.target=java.lang.String\ initFromStream(java.io.InputStream)
comment22.params=
comment22.target=void\ initWrite()
comment23.params=f
comment23.target=void\ initWrite(java.io.File)
comment24.params=fname
comment24.target=void\ initWrite(java.lang.String)
comment3.params=filename
comment3.target=FileResource(java.lang.String)
comment3.text=\n\ Create\ a\ <code>FileResource</code>\ object\ that\ opens\ a\ file\ whose\ name\ is\ passed\ as\ a\n\ parameter.\n\n\ The\ named\ file\ should\ be\ on\ the\ current\ class\ path\ to\ be\ found.\n\n\ @param\ filename\ the\ name\ of\ the\ file\ to\ be\ opened\n\ @throws\ @exception\ if\ the\ filename\ cannot\ be\ accessed\n
comment4.params=writable
comment4.target=FileResource(boolean)
comment4.text=\n\ Create\ a\ <code>FileResource</code>\ object\ that\ opens\ the\ file\ chosen\ by\ the\ user\ using\ a\ file\n\ selection\ dialog\ box,\ possibly\ to\ write\ to\ it.\n\n\ If\ the\ user\ wants\ to\ change\ the\ contents\ of\ the\ open\ file\ by\ using\ the\ method\n\ <code>write</code>\ to\ add\ new\ strings\ to\ it,\ pass\ <code>true</code>\ as\ the\ second\ parameter.\n\ Otherwise\ it\ is\ assumed\ the\ user\ will\ only\ iterate\ over\ the\ existing\ contents\ of\ the\ file.\n\n\ @param\ writable\ allow\ changes\ to\ this\ file\ only\ if\ true\n\ @throws\ @exception\ if\ no\ file\ is\ selected\ by\ the\ user\n
comment5.params=file\ writable
comment5.target=FileResource(java.io.File,\ boolean)
comment5.text=\n\ Create\ a\ <code>FileResource</code>\ object\ that\ opens\ a\ file\ represented\ by\ the\ File\ object\n\ passed\ as\ a\ parameter,\ possibly\ to\ write\ to\ it.\n\n\ If\ the\ user\ wants\ to\ change\ the\ contents\ of\ the\ open\ file\ by\ using\ the\ method\n\ <code>write</code>\ to\ add\ new\ strings\ to\ it,\ pass\ <code>true</code>\ as\ the\ second\ parameter.\n\ Otherwise\ it\ is\ assumed\ the\ user\ will\ only\ iterate\ over\ the\ existing\ contents\ of\ the\ file.\n\n\ Useful,\ for\ example,\ when\ used\ in\ conjunction\ with\ the\ <code>DirectoryResource</code>\ class.\n\n\ @param\ file\ the\ file\ to\ be\ represented\ by\ this\ resource\n\ @param\ writable\ allow\ changes\ to\ this\ file\ only\ if\ true\n\ @throws\ @exception\ if\ the\ file\ cannot\ be\ accessed\n
comment6.params=filename\ writable
comment6.target=FileResource(java.lang.String,\ boolean)
comment6.text=\n\ Create\ a\ <code>FileResource</code>\ object\ that\ opens\ a\ file\ whose\ name\ is\ passed\ as\ a\n\ parameter,\ possibly\ to\ write\ to\ it.\n\n\ If\ the\ user\ wants\ to\ change\ the\ contents\ of\ the\ open\ file\ by\ using\ the\ method\n\ <code>write</code>\ to\ add\ new\ strings\ to\ it,\ pass\ <code>true</code>\ as\ the\ second\ parameter.\n\ Otherwise\ it\ is\ assumed\ the\ user\ will\ only\ iterate\ over\ the\ existing\ contents\ of\ the\ file.\n\n\ The\ named\ file\ should\ be\ on\ the\ current\ class\ path\ to\ be\ found.\n\n\ @param\ filename\ the\ name\ of\ the\ file\ to\ be\ opened\n\ @param\ writable\ allow\ changes\ to\ this\ file\ only\ if\ true\n\ @throws\ @exception\ if\ the\ filename\ cannot\ be\ accessed\n
comment7.params=
comment7.target=java.lang.Iterable\ lines()
comment7.text=\n\ Allow\ access\ to\ this\ opened\ file\ one\ line\ at\ a\ time.\n\n\ @return\ an\ <code>Iterable</code>\ that\ will\ allow\ access\ to\ contents\ of\ opened\ file\ one\ line\n\ \ \ \ \ \ \ \ \ at\ a\ time.\n
comment8.params=
comment8.target=java.lang.Iterable\ words()
comment8.text=\n\ Allow\ access\ to\ this\ opened\ file\ one\ word\ at\ a\ time,\ where\ words\ are\ separated\ by\n\ white-space.\ This\ means\ any\ form\ of\ spaces,\ like\ tabs\ or\ newlines,\ can\ delimit\ words.\n\n\ @return\ an\ <code>Iterable</code>\ that\ will\ allow\ access\ to\ contents\ of\ opened\ file\ one\ word\n\ \ \ \ \ \ \ \ \ at\ a\ time.\n
comment9.params=
comment9.target=java.lang.String\ asString()
comment9.text=\n\ Return\ entire\ contents\ of\ this\ opened\ file\ as\ one\ string.\n\n\ @return\ a\ <code>String</code>\ that\ is\ the\ contents\ of\ the\ open\ file\n
numComments=25
